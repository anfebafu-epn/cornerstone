<?php

// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
class cornerstone_integrator_datatypes_UUID {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->UUIDValue = "00000000-0000-0000-0000-000000000000";
	}}
	public $UUIDValue;
	public function set_Value($UUIDString) {
		$this->UUIDValue = $UUIDString;
		return $this;
	}
	public function toBytes() {
		$GeneratedUUID = haxe_io_Bytes::alloc(16);
		$s = $this->UUIDValue;
		$SimpleUUID = str_replace("-", "", $s);
		$counter = 0;
		$lastvalue = 0;
		$bytespos = 0;
		{
			$_g1 = 0;
			$_g = strlen($SimpleUUID);
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$HexLetter = _hx_char_at($SimpleUUID, $i);
				$value = 0;
				switch($HexLetter) {
				case "1":{
					$value = 1;
				}break;
				case "2":{
					$value = 2;
				}break;
				case "3":{
					$value = 3;
				}break;
				case "4":{
					$value = 4;
				}break;
				case "5":{
					$value = 5;
				}break;
				case "6":{
					$value = 6;
				}break;
				case "7":{
					$value = 7;
				}break;
				case "8":{
					$value = 8;
				}break;
				case "9":{
					$value = 9;
				}break;
				case "A":{
					$value = 10;
				}break;
				case "B":{
					$value = 11;
				}break;
				case "C":{
					$value = 12;
				}break;
				case "D":{
					$value = 13;
				}break;
				case "E":{
					$value = 14;
				}break;
				case "F":{
					$value = 15;
				}break;
				}
				$counter = $counter + 1;
				if($counter === 2) {
					$counter = 0;
					{
						$this1 = $GeneratedUUID->b;
						$this1->s[$bytespos] = chr($lastvalue | $value >> 4);
						unset($this1);
					}
					$bytespos = $bytespos + 1;
					$lastvalue = 0;
				} else {
					$lastvalue = $value;
				}
				unset($value,$i,$HexLetter);
			}
		}
		return $GeneratedUUID;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $hEMPTY;
	static $CHARS;
	static $MPM = 2147483647.0;
	static $MINSTD = 16807.0;
	static function newUUID() {
		$seed = cornerstone_integrator_datatypes_UUID::makeRandomSeed();
		$chars = cornerstone_integrator_datatypes_UUID::$CHARS;
		$uuid = new _hx_array(array());
		$rnd = 0;
		$r = null;
		{
			$_g = 0;
			while($_g < 36) {
				$_g = $_g + 1;
				$i = $_g - 1;
				$tmp = null;
				$tmp1 = null;
				$tmp2 = null;
				if($i !== 8) {
					$tmp2 = $i === 13;
				} else {
					$tmp2 = true;
				}
				if(!$tmp2) {
					$tmp1 = $i === 18;
				} else {
					$tmp1 = true;
				}
				if(!$tmp1) {
					$tmp = $i === 23;
				} else {
					$tmp = true;
				}
				if($tmp) {
					$uuid[$i] = "-";
				} else {
					if($i === 14) {
						$uuid[$i] = "4";
					} else {
						if($rnd <= 2) {
							$seed = cornerstone_integrator_datatypes_UUID::nextParkMiller($seed);
							$rnd = 33554432 + Std::int(_hx_cast($seed, _hx_qtype("Float")) * 16777216) | 0;
						}
						$r = $rnd & 15;
						$rnd = $rnd >> 4;
						$chars1 = null;
						if($i === 19) {
							$chars1 = $r & 3 | 8;
						} else {
							$chars1 = $r;
						}
						$uuid[$i] = $chars[$chars1];
						unset($chars1);
					}
				}
				unset($tmp2,$tmp1,$tmp,$i);
			}
		}
		$tmp3 = new cornerstone_integrator_datatypes_UUID();
		return $tmp3->set_Value($uuid->join(""));
	}
	static function makeRandomSeed() {
		return Math::floor(Math::random() * 2147483647.0);
	}
	static function nextParkMiller($seed) {
		return Std::int(_hx_mod($seed * 16807.0, 2147483647.0));
	}
	static function FromBytes($UUIDBytes) {
		$ReadedUUID = "";
		$HexLetters = "0123456789ABCDEF";
		$LetterCounter = 0;
		{
			$_g1 = 0;
			$_g = $UUIDBytes->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$this1 = $UUIDBytes->b;
				$Readed = ord($this1->s[$i]);
				$First = $Readed << 4;
				$Second = $Readed >> 4;
				$ReadedUUID = _hx_string_or_null($ReadedUUID) . _hx_string_or_null(_hx_char_at($HexLetters, $First));
				$ReadedUUID = _hx_string_or_null($ReadedUUID) . _hx_string_or_null(_hx_char_at($HexLetters, $Second));
				$LetterCounter = $LetterCounter + 1;
				$tmp = null;
				$tmp1 = null;
				$tmp2 = null;
				if($LetterCounter !== 9) {
					$tmp2 = $LetterCounter === 14;
				} else {
					$tmp2 = true;
				}
				if(!$tmp2) {
					$tmp1 = $LetterCounter === 19;
				} else {
					$tmp1 = true;
				}
				if(!$tmp1) {
					$tmp = $LetterCounter === 24;
				} else {
					$tmp = true;
				}
				if($tmp) {
					$ReadedUUID = _hx_string_or_null($ReadedUUID) . "-";
					$LetterCounter = $LetterCounter + 1;
				}
				unset($tmp2,$tmp1,$tmp,$this1,$i,$Second,$Readed,$First);
			}
		}
		return _hx_deref(new cornerstone_integrator_datatypes_UUID())->set_Value($ReadedUUID);
	}
	function __toString() { return 'cornerstone.integrator.datatypes.UUID'; }
}
cornerstone_integrator_datatypes_UUID::$hEMPTY = new cornerstone_integrator_datatypes_UUID();
cornerstone_integrator_datatypes_UUID::$CHARS = _hx_explode("", "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
