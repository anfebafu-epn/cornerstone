<?php

// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
class haxe_io_ArrayBufferViewImpl {
	public function __construct($bytes, $pos, $length) {
		if(!php_Boot::$skip_constructor) {
		$this->bytes = $bytes;
		$this->byteOffset = $pos;
		$this->byteLength = $length;
	}}
	public $bytes;
	public $byteOffset;
	public $byteLength;
	public function sub($begin, $length = null) {
		if($length === null) {
			$length = $this->byteLength - $begin;
		}
		$tmp = null;
		$tmp1 = null;
		if($begin >= 0) {
			$tmp1 = $length < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $begin + $length > $this->byteLength;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		return new haxe_io_ArrayBufferViewImpl($this->bytes, $this->byteOffset + $begin, $length);
	}
	public function subarray($begin = null, $end = null) {
		if($begin === null) {
			$begin = 0;
		}
		if($end === null) {
			$end = $this->byteLength - $begin;
		}
		return $this->sub($begin, $end - $begin);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'haxe.io.ArrayBufferViewImpl'; }
}
