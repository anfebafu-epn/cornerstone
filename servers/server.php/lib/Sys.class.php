<?php

// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
class Sys {
	public function __construct(){}
	static function hprint($v) {
		echo(Std::string($v));
	}
	static function println($v) {
		Sys::hprint($v);
		Sys::hprint("\x0A");
	}
	static function args() {
		if(array_key_exists("argv", $_SERVER)) {
			return new _hx_array(array_slice($_SERVER["argv"], 1));
		} else {
			return (new _hx_array(array()));
		}
	}
	static function getEnv($s) {
		$ret = getenv($s);
		if(_hx_equal($ret, false)) {
			return null;
		} else {
			return $ret;
		}
	}
	static function putEnv($s, $v) {
		putenv(_hx_string_or_null($s) . "=" . _hx_string_or_null($v));
		return;
	}
	static function sleep($seconds) {
		usleep($seconds * 1000000);
		return;
	}
	static function setTimeLocale($loc) {
		return setlocale(LC_TIME, $loc) !== false;
	}
	static function getCwd() {
		$cwd = getcwd();
		$l = _hx_substr($cwd, -1, null);
		$tmp = null;
		$tmp1 = null;
		if($l !== "/") {
			$tmp1 = $l === "\\";
		} else {
			$tmp1 = true;
		}
		if($tmp1) {
			$tmp = "";
		} else {
			$tmp = "/";
		}
		return _hx_string_or_null($cwd) . _hx_string_or_null($tmp);
	}
	static function setCwd($s) {
		chdir($s);
	}
	static function systemName() {
		$s = php_uname("s");
		$p = _hx_index_of($s, " ", null);
		if($p >= 0) {
			return _hx_substr($s, 0, $p);
		} else {
			return $s;
		}
	}
	static function command($cmd, $args = null) {
		if($args !== null) {
			$_g = Sys::systemName();
			if($_g === "Windows") {
				$_g1 = (new _hx_array(array()));
				{
					$_g11 = 0;
					$_g2 = str_replace("/", "\\", $cmd);
					$_g21 = _hx_deref((new _hx_array(array($_g2))))->concat($args);
					while($_g11 < $_g21->length) {
						$a = $_g21[$_g11];
						$_g11 = $_g11 + 1;
						$_g1->push(StringTools::quoteWinArg($a, true));
						unset($a);
					}
				}
				$cmd = $_g1->join(" ");
			} else {
				$cmd = _hx_deref((new _hx_array(array($cmd))))->concat($args)->map((property_exists("StringTools", "quoteUnixArg") ? StringTools::$quoteUnixArg: array("StringTools", "quoteUnixArg")))->join(" ");
			}
		}
		$result = 0;
		system($cmd, $result);
		return $result;
	}
	static function hexit($code) {
		exit($code);
	}
	static function time() {
		return microtime(true);
	}
	static function cpuTime() {
		$tmp = microtime(true);
		return $tmp - $_SERVER['REQUEST_TIME'];
	}
	static function executablePath() {
		return $_SERVER['SCRIPT_FILENAME'];
	}
	static $_programPath;
	static function programPath() {
		return Sys::$_programPath;
	}
	static function environment() {
		return php_Lib::hashOfAssociativeArray($_SERVER);
	}
	static function stdin() {
		return new sys_io_FileInput(STDIN);
	}
	static function stdout() {
		return new sys_io_FileOutput(STDOUT);
	}
	static function stderr() {
		return new sys_io_FileOutput(STDERR);
	}
	static function getChar($echo) {
		$v = fgetc(STDIN);
		if($echo) {
			echo($v);
		}
		return $v;
	}
	function __toString() { return 'Sys'; }
}
Sys::$_programPath = Sys_0();
function Sys_0() {
	{
		$relPath = $_SERVER['SCRIPT_FILENAME'];
		$p = realpath($relPath);
		if(($p === false)) {
			return null;
		} else {
			return $p;
		}
		unset($relPath,$p);
	}
}
