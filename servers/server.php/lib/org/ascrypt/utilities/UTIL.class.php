<?php

// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
class org_ascrypt_utilities_UTIL {
	public function __construct(){}
	static function pack($bytes, $little = null) {
		if($little === null) {
			$little = true;
		}
		$w = (new _hx_array(array()));
		$l = $bytes->length;
		$b1 = 0;
		$b2 = 0;
		$b3 = 0;
		$b4 = 0;
		$i = 0;
		while($i < $l) {
			if($little) {
				$b1 = $bytes[$i];
				$b2 = $bytes[$i + 1] << 8;
				$b3 = $bytes[$i + 2] << 16;
				$b4 = $bytes[$i + 3] << 24;
			} else {
				$b1 = $bytes[$i] << 24;
				$b2 = $bytes[$i + 1] << 16;
				$b3 = $bytes[$i + 2] << 8;
				$b4 = $bytes[$i + 3];
			}
			$w[Std::int($i / 4)] = $b1 | $b2 | $b3 | $b4;
			$i = $i + 4;
		}
		return $w;
	}
	static function unpack($words, $little = null) {
		if($little === null) {
			$little = true;
		}
		$b = (new _hx_array(array()));
		$l = $words->length;
		$b1 = null;
		$b2 = null;
		$b3 = null;
		$b4 = null;
		{
			$_g1 = 0;
			$_g = $l;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				if($little) {
					$b1 = $words->a[$i] & 255;
					$b2 = ($words->a[$i] & 65280) >> 8;
					$b3 = ($words->a[$i] & 16711680) >> 16;
					$b4 = ($words->a[$i] & -16777216) >> 24;
					if($b4 < 0) {
						$b4 = $b4 + 256;
					}
				} else {
					$b1 = ($words->a[$i] & -16777216) >> 24;
					$b2 = ($words->a[$i] & 16711680) >> 16;
					$b3 = ($words->a[$i] & 65280) >> 8;
					$b4 = $words->a[$i] & 255;
					if($b1 < 0) {
						$b1 = $b1 + 256;
					}
				}
				$b[$i * 4] = $b1;
				$b[$i * 4 + 1] = $b2;
				$b[$i * 4 + 2] = $b3;
				$b[$i * 4 + 3] = $b4;
				unset($i);
			}
		}
		return $b;
	}
	static function format($string, $args) {
		$l = $args->length;
		{
			$_g1 = 0;
			$_g = $l;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$parts = _hx_explode("{" . _hx_string_rec($i, "") . "}", $string);
				$string = $parts->join($args[$i]);
				unset($parts,$i);
			}
		}
		return $string;
	}
	function __toString() { return 'org.ascrypt.utilities.UTIL'; }
}
